{"posts":[{"title":"Java流内容替换","text":"业务上有需求，需要将日语外字替换成指定字符，利用FilterInputStream实现。 1234567891011121314151617181920212223242526272829303132333435363738394041424344import java.io.BufferedReader;import java.io.ByteArrayInputStream;import java.io.FilterInputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.List;public class App { public static void main(String[] args) throws Exception { String str = &quot;abc&quot;; InputStream stream = new ByteArrayInputStream(str.getBytes()); // abc -&gt; acc replaceString(stream).stream().forEach( elt -&gt; System.out.println(elt)); } private static List&lt;String&gt; replaceString(InputStream inputStream) throws UnsupportedEncodingException { List&lt;String&gt; result = new ArrayList&lt;&gt;(); FilterInputStream filterInputStream = new FilterInputStream(inputStream) { @Override public int read(byte[] b, int off, int len) throws IOException { int bytesRead = super.read(b, off, len); if (bytesRead != -1) { for (int i = off; i &lt; off + bytesRead - 1; i++) { // ab -&gt; ac if (b[i] == (byte) 0x61 &amp;&amp; b[i + 1] == (byte) 0x62) { b[i] = (byte) 0x61; b[i + 1] = (byte) 0x63; } } } return bytesRead; } }; BufferedReader br = new BufferedReader(new InputStreamReader(filterInputStream, &quot;UTF8&quot;)); br.lines().forEach( elt -&gt; { result.add(elt); }); return result; }}","link":"/2023/06/07/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/Java%E6%B5%81%E5%86%85%E5%AE%B9%E6%9B%BF%E6%8D%A2/"},{"title":"ModelMapper示例","text":"DtoDtoA12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849package com.example;public class DtoA { Integer userNo; String userName; String userPassword; /** * 用于ModelMapper */ public DtoA() { } public DtoA(Integer userNo, String userName, String userPassword) { this.userNo = userNo; this.userName = userName; this.userPassword = userPassword; } public Integer getUserNo() { return userNo; } public void setUserNo(Integer userNo) { this.userNo = userNo; } public String getUserName() { return userName; } public void setUserName(String userName) { this.userName = userName; } public String getUserPassword() { return userPassword; } public void setUserPassword(String userPassword) { this.userPassword = userPassword; } @Override public String toString() { return &quot;com.example.DtoA [userNo=&quot; + userNo + &quot;, userName=&quot; + userName + &quot;, userPassword=&quot; + userPassword + &quot;]&quot;; }} DtoB1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package com.example;/** * @author wyue */public class DtoB { Integer userNo; String userName; String userPassword; /** * 用于ModelMapper */ public DtoB() { } public Integer getUserNo() { return userNo; } public void setUserNo(Integer userNo) { this.userNo = userNo; } public String getUserName() { return userName; } public void setUserName(String userName) { this.userName = userName; } public String getUserPassword() { return userPassword; } public void setUserPassword(String userPassword) { this.userPassword = userPassword; } @Override public String toString() { return &quot;com.example.DtoB [userNo=&quot; + userNo + &quot;, userName=&quot; + userName + &quot;, userPassword=&quot; + userPassword + &quot;]&quot;; }} Main匹配/过滤配置全放在PropertyMap中，主要用到了Converter和Condition。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263package com.example;import org.modelmapper.AbstractConverter;import org.modelmapper.Condition;import org.modelmapper.ModelMapper;import org.modelmapper.PropertyMap;import org.modelmapper.convention.MatchingStrategies;import java.util.ArrayList;import java.util.List;import java.util.Objects;public class App { public static void main(String[] args) { List&lt;DtoA&gt; aList = new ArrayList&lt;&gt;(); DtoA a1 = new DtoA(1, &quot;1&quot;, &quot;1&quot;); DtoA a2 = new DtoA(2, &quot;2&quot;, &quot;2&quot;); aList.add(a1); aList.add(a2); PropertyMap&lt;DtoA, DtoB&gt; propertyMap = new PropertyMap&lt;&gt;() { @Override protected void configure() { // userNo:2 -&gt; userNo:22 using(new AbstractConverter&lt;Integer, Integer&gt;() { @Override protected Integer convert(Integer source) { return source == 2 ? 22 : source; } }).map(source.getUserNo(), destination.getUserNo()); // userName:2 -&gt; userName:22 using(new AbstractConverter&lt;String, String&gt;() { @Override protected String convert(String source) { return Objects.equals(source, &quot;2&quot;) ? &quot;22&quot; : source; } }).map(source.getUserName(), destination.getUserName()); // userPassword:1 -&gt; null, 2 -&gt; 2 Condition&lt;String, String&gt; passwordCondition = ctx -&gt; &quot;2&quot;.equals(ctx.getSource()); when(passwordCondition).map(source.getUserPassword(), destination.getUserPassword()); } }; List&lt;DtoB&gt; result = new App().mapList(aList, DtoB.class, propertyMap); for (DtoB tmDtoB : result) { System.out.println(tmDtoB); } } public &lt;S, T&gt; List&lt;T&gt; mapList(List&lt;S&gt; source, Class&lt;T&gt; targetClass, PropertyMap&lt;S, T&gt; propertyMap) { ModelMapper modelMapper = new ModelMapper(); modelMapper.getConfiguration().setFieldMatchingEnabled(true); modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT); if (propertyMap != null) { modelMapper.addMappings(propertyMap); } return source.stream().map(element -&gt; modelMapper.map(element, targetClass)).toList(); }} 3 更多资料https://www.cnblogs.com/haoyul/p/10864139.html","link":"/2023/06/17/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/ModelMapper%E7%A4%BA%E4%BE%8B/"},{"title":"Python3-enum枚举类使用示例","text":"12345678910111213141516171819202122232425262728from enum import Enum# 声明枚举类class Branch(Enum): MAIN = &quot;main branch&quot; DEV = &quot;develop branch&quot;print(Branch.MAIN.name) # MAINprint(Branch.MAIN.value) # main branchprint(Branch[&quot;MAIN&quot;]) # Branch.MAINprint(Branch(&quot;main branch&quot;)) # Branch.MAINprint(Branch.MAIN) # Branch.MAINprint(Branch.MAIN == Branch.MAIN) # Trueprint(Branch.MAIN == Branch.DEV) # Falseprint(Branch.MAIN is Branch.MAIN) # Truefor branch in Branch: print(branch) # Branch.MAIN # Branch.DEVfor branch in Branch.__members__: print(branch) # MAIN # DEV","link":"/2021/10/28/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/Python3-enum%E6%9E%9A%E4%B8%BE%E7%B1%BB%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/"},{"title":"Python引用自定义Python文件","text":"Python的包引用可以分为如下四种情况 情况1 utils和main位于同级目录下12--main.py--utils.py 直接单纯import即可 12345678# utils.pydef say_hello(name): return &quot;hello &quot; + name# main.pyimport utilsif __name__ == '__main__': print(utils.say_hello(&quot;world&quot;)) 情况2 utils位于main下同级目录下的子目录内123--main.py--dir/----utils.py 利用from进行import 123456789# main.pyfrom dir import utilsif __name__ == '__main__': print(utils.say_hello(&quot;world&quot;))# dir/utils.pydef say_hello(name): return &quot;hello &quot; + name 情况3 utils位于main的父目录内123--utils.py--dir/----main.py 方案一追加pythonpath(一般默认情况下只有main函数所在的目录会被添加到pythonpath，但是这里的utils.py在main.py的父目录中，所以我们需要将这个父目录也添加到pythonpath中。) 12345678910111213# dir/main.pyimport sysfrom os import path# 这里相当于把相对路径 .. 添加到pythonpath中sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))import utilsif __name__ == '__main__': print(utils.say_hello(&quot;world&quot;))# dir/utils.pydef say_hello(name): return &quot;hello &quot; + name 方案二使用python -m命令,python3 -m dir.main 情况4 utils和main处于不同的目录下1234--dir1/----utils.py--dir2/----main.py 解决方法同情况3","link":"/2023/06/07/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/Python%E5%BC%95%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89Python%E6%96%87%E4%BB%B6/"},{"title":"Python操作ini文件","text":"前期说明项目结构123PythonINIDemo |-MysqlConfig.ini |-PythonINIDemo.py MysqlConfig.ini文件初始内容1234[prod]url = jdbc:mysql://localhost:3306/produsername = prod1password = prod11 Python操作查询123456789101112131415161718192021222324import configparserconfig = configparser.ConfigParser()config.read(&quot;MysqlConfig.ini&quot;, encoding=&quot;utf-8&quot;)# 获取所有的section节点print(config.sections()) # ['prod']# 获取指定section的所有keyprint(config.options(&quot;prod&quot;)) # ['url', 'username', 'password']# 根据section与option，获取指定值print(config.get(&quot;prod&quot;, &quot;url&quot;)) # jdbc:mysql://localhost:3306/prodprint(config.get(&quot;prod&quot;, &quot;username&quot;)) # prod1print(config.get(&quot;prod&quot;, &quot;password&quot;)) # prod11# 获取section下所有的option(key, value)print(config.items(&quot;prod&quot;)) # [('url', 'jdbc:mysql://localhost:3306/prod'), ('username', 'prod1'), ('password', 'prod11')]# 检查指定 section/option 是否存在print(config.has_section(&quot;prod&quot;)) # Trueprint(config.has_option(&quot;prod&quot;, &quot;url&quot;)) # Trueprint(config.has_section(&quot;dev&quot;)) # Falseprint(config.has_option(&quot;prod&quot;, &quot;token&quot;)) # False 增改代码1234567891011121314151617181920212223242526272829303132import configparserconfig = configparser.ConfigParser()config.read(&quot;MysqlConfig.ini&quot;, encoding=&quot;utf-8&quot;)dev_section = &quot;dev&quot;dev_option = [&quot;url&quot;, &quot;username&quot;, &quot;password&quot;]dev_url = &quot;jdbc:mysql://localhost:3306/dev1&quot;dev_username = &quot;dev1&quot;dev_password = &quot;dev11&quot;# 创建sectionif not config.has_section(dev_section): config.add_section(dev_section)# 创建optionif not config.has_option(dev_section, dev_option[0]): config.set(dev_section, dev_option[0], dev_url)# 创建optionif not config.has_option(dev_section, dev_option[1]): config.set(dev_section, dev_option[1], dev_username)# 创建optionif not config.has_option(dev_section, dev_option[2]): config.set(dev_section, dev_option[2], dev_password)# 修改option(option不存在则创建)config.set(dev_section, dev_option[2], &quot;update_dev&quot;)# 将变更写入文件config.write(open(&quot;MysqlConfig.ini&quot;, &quot;w&quot;)) 测试结果（MysqlConfig.ini文件）123456789[prod]url = jdbc:mysql://localhost:3306/produsername = prod1password = prod11[dev]url = jdbc:mysql://localhost:3306/dev1username = dev1password = update_dev 删除123456789101112131415161718import configparserconfig = configparser.ConfigParser()config.read(&quot;MysqlConfig.ini&quot;, encoding=&quot;utf-8&quot;)config.add_section(&quot;test&quot;)config.set(&quot;test&quot;, &quot;url&quot;, &quot;testUrl&quot;)config.set(&quot;test&quot;, &quot;username&quot;, &quot;testUserName&quot;)print(config.items(&quot;test&quot;)) # [('url', 'testUrl'), ('username', 'testUserName')]# 删除optionconfig.remove_option(&quot;test&quot;, &quot;url&quot;)print(config.items(&quot;test&quot;)) # [('username', 'testUserName')]# 删除sectionconfig.remove_section(&quot;test&quot;)print(config.has_section(&quot;test&quot;)) # False","link":"/2023/03/01/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/Python%E6%93%8D%E4%BD%9Cini%E6%96%87%E4%BB%B6/"},{"title":"Python生成小六壬推算数据","text":"#Python 关于小六壬 食指下节叫大安，代表最大的吉利。 食指上节叫留连，代表运气平平，凡事拖延。 中指上节叫速喜，代表喜事就在眼前，算各种事情都是上吉的好卦。 中指下节叫空亡，这是最凶的卦，所占事宜均很大的不利。 无名指上节叫赤口，代表多争执有官讼，事态不和。 无名指下节叫小吉，代表将要有好结果，所算的事情值得等待和坚持。 更多详细信息：http://www.360doc.com/content/20/0407/11/64459437_904388099.shtml 代码块1234567891011121314151617181920212223242526272829303132333435from borax.calendars.lunardate import LunarDatedict_list = ['大安(上上)', '留连(中)', '速喜(上)', '赤口(中下)', '小吉(中上)', '空亡(下)']time_list = [&quot;子时：00-02点&quot;, &quot;丑时：02-04点&quot;, &quot;寅时：04-06点&quot;, &quot;卯时：06-08点&quot;, &quot;辰时：08-10点&quot;, &quot;巳时：10-12点&quot;, &quot;午时：12-14点&quot;, &quot;未时：14-16点&quot;, &quot;申时：16-18点&quot;, &quot;酉时：18-20点&quot;, &quot;戌时：20-22点&quot;, &quot;亥时：22-24点&quot;]# s_year = int(input(&quot;请输入年：&quot;))# s_month = int(input(&quot;请输入月：&quot;))# s_day = int(input(&quot;请输入日：&quot;))s_year = 2022s_month = 2s_day = 13print('公历 ', s_year, '年', s_month, '月', s_day, '日')lunar_date = LunarDate.from_solar_date(s_year, s_month, s_day)month = lunar_date.monthday = lunar_date.dayprint(lunar_date.strftime('%G'))print('农历 ', month, '月', day, '日')print(&quot;===================&quot;)index_month = (month - 1) % 6result_month = dict_list[index_month]print(&quot;本月运势：&quot; + result_month)print(&quot;===================&quot;)index_day = (index_month + day - 1) % 6result_day = dict_list[index_day]print(&quot;本日运势：&quot; + result_day)print(&quot;===================&quot;)for index in range(0, 12): print(time_list[index] + &quot; 运势：&quot; + dict_list[(index + index_day) % 6]) 输出结果1234567891011121314151617181920公历 2022 年 2 月 13 日壬寅年壬寅月丁酉日农历 1 月 13 日===================本月运势：大安(上上)===================本日运势：大安(上上)===================子时：00-02点 运势：大安(上上)丑时：02-04点 运势：留连(中)寅时：04-06点 运势：速喜(上)卯时：06-08点 运势：赤口(中下)辰时：08-10点 运势：小吉(中上)巳时：10-12点 运势：空亡(下)午时：12-14点 运势：大安(上上)未时：14-16点 运势：留连(中)申时：16-18点 运势：速喜(上)酉时：18-20点 运势：赤口(中下)戌时：20-22点 运势：小吉(中上)亥时：22-24点 运势：空亡(下)","link":"/2023/06/18/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/Python%E7%94%9F%E6%88%90%E5%B0%8F%E5%85%AD%E5%A3%AC%E6%8E%A8%E7%AE%97%E6%95%B0%E6%8D%AE/"},{"title":"TortoiseGit中known changes与unknown changes区别","text":"示意图 官方介绍known changes - This allows remote repository to accept a safer non-fast-forward push. This can cause the remote repository to lose commits; use it with care. This can prevent from losing unknown changes from other people on the remote. It checks if the server branch points to the same commit as the remote-tracking branch (known changes). If yes, a force push will be performed. Otherwise it will be rejected. Since git does not have remote-tracking tags, tags cannot be overwritten using this option. This passes –force-with-lease option of git push command. unknown changes - This allows remote repository to accept an unsafe non-fast-forward push. This can cause the remote repository to lose commits; use it with care. This does not check any server commits, so it is possible to lose unknown changes on the remote. Use this option with Include Tags to overwrite tags. This passes the traditional –force option of git push command. 简单理解unknown changes 等价于--force，强行提交时，可能覆盖团队成员在此期间推送的所有更改。 known changes 等价于--force-with-lease，使用此参数推送，如果远端有其他人推送了新的提交，那么推送将被拒绝。该命令解决的是本地仓库不够新时，依然覆盖了远端新仓库的问题，如果执意想要覆盖远端提交，只需要先 fetch 再push，它也不会拒绝的。","link":"/2023/03/01/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/TortoiseGit%E4%B8%ADknown-changes%E4%B8%8Eunknown-changes%E5%8C%BA%E5%88%AB/"},{"title":"localstack常用命令","text":"创建bucketaws --endpoint-url=http://localhost:4566 s3api create-bucket --bucket cs-d1-accom-s3-apl-local 创建folder（创建文件去掉最后的/）aws s3api put-object --bucket cs-d1-accom-s3-apl-local --key Batch/input/ --endpoint-url http://localhost:4566 拷贝文件aws --endpoint-url=http://localhost:4566 s3 cp TableConfigurationForDelete.json s3://cs-d1-accom-s3-apl-local/Batch/input/ 查看所有bucketaws --endpoint-url=http://localhost:4566 s3 ls 查看bucket下所有文件aws --endpoint-url=http://localhost:4566 s3api list-objects --bucket cs-d1-accom-s3-apl-local 删除指定文件aws --endpoint-url=http://localhost:4566 s3api delete-object --bucket &lt;bucket_name&gt; --key &lt;object_key&gt; 例如：aws --endpoint-url=http://localhost:4566 s3api delete-object --bucket cs-d1-accom-s3-apl-local --key test.csv 下载文件到本地aws --endpoint-url=http://localhost:4566 s3api get-object --bucket &lt;bucket_name&gt; --key &lt;object_key&gt; &lt;local_file_path&gt; aws --endpoint-url=http://localhost:4566 s3api get-object --bucket cs-d1-accom-s3-apl-local --key test.csv /home/testuser/ 清空bucketaws --endpoint-url=http://localhost:4566 s3 rm s3://your-bucket-name --recursive aws --endpoint-url=http://localhost:4566 s3 rm s3://cs-d1-accom-s3-apl-local --recursive 报错TimeoutError: gave up waiting for edge server on 0.0.0.0:4566 解决方式：断开VPN","link":"/2023/05/11/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/localstack%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"},{"title":"python应用简单总结","text":"跨文件调方法123# FileA.pydef test(): print(&quot;testA&quot;) 123# FileB.pyimport FileAFileA.test() 跨文件调类12345# FileA.pyclass A { def test(self): print(&quot;testA&quot;)} 1234# FileB.pyfrom FileA import Aa = A()a.test() 随机掉用list内元素123import randomprint(random.choice([1, 2, 3]))# 输出1 2 3中随机一个 字符串模板化12345678from string import TemplatetemplateStr=&quot;hello, $name&quot;print(Template(templateStr).substitute(name=&quot;world&quot;))# hello, worlddata = &quot;hello, {name}&quot;print(data.format(name=&quot;world&quot;))# hello, world 根据字符串调用方法12345678# 利用方法名字符串调用方法class Test: def test(self, param: str): print(param) def main(): func = getattr(self, &quot;test&quot;) data = func() 更多参照：https://mozillazg.com/2016/03/python-exec-function-globals-and-locals-arguments.html 常用文件处理123456789101112131415161718192021222324import osimport shutildef createFile(content: str, folderPath: str, fileName: str): # 路径不存在时创建文件夹 if not os.path.exists(folderPath): os.makedirs(folderPath) # 需要设置newline=&quot;\\n&quot;, encoding=&quot;utf-8&quot;时追加参数 writeContent(folderPath + fileName, content)def copyFile(fromPath: str, toPath: str): shutil.copy(fromPath, toPath)def getFileContent(filePath: str, newline=&quot;\\n&quot;, encoding=&quot;utf-8&quot;) -&gt; str: file = open(filePath,'r', encoding=encoding, newline=newline) data = file.read() file.close() return datadef writeContent(filePath: str, content: str, newline=&quot;\\n&quot;, encoding=&quot;utf-8&quot;): # newline控制换行符，Windows下设置为\\r\\n，Unix下设置为\\n file = open(filePath, &quot;w+&quot;, encoding=encoding, newline=newline) file.write(content) file.close() 生成随机日期123456789101112# 生成日期范围内的日期from datetime import datetime, timedeltadef random_date(startDate, endDate) -&gt; str: delta = endDate - startDate seconds = delta.total_seconds() n = random.randrange(seconds) return startDate + timedelta(seconds=n)startDate = datetime.strptime('1/1/2022', '%m/%d/%Y')endDate = datetime.strptime('12/31/2022', '%m/%d/%Y')print(str(random_date(startDate, endDate))) Excel数据转listExcel数据直接粘贴到编辑器中时，单元格数据之间有换行符\\t，可以借此拆分 123456789101112data = '''test1 test2 test3test11 test22 test33'''data = data.splitlines()data.remove('')result = []for tmp in data: tmpList = tmp.split(&quot;\\t&quot;) result.append(tmpList)print(result)# [['test1', 'test2', 'test3'], ['test11', 'test22', 'test33']]","link":"/2023/02/14/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/python%E5%BA%94%E7%94%A8%E7%AE%80%E5%8D%95%E6%80%BB%E7%BB%93/"},{"title":"sonarlint扫描结果的修复记录","text":"Disable XML external entity (XXE) processing’错误代码1DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance(); 解决方法添加如下代码段 1234567891011121314DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();// sonar compliant ---- start// to be compliant, completely disable DOCTYPE declaration:dbf.setFeature(&quot;http://apache.org/xml/features/disallow-doctype-decl&quot;, true);// or completely disable external entities declarations:dbf.setFeature(&quot;http://xml.org/sax/features/external-general-entities&quot;, false);dbf.setFeature(&quot;http://xml.org/sax/features/external-parameter-entities&quot;, false);// or prohibit the use of all protocols by external entities:dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, &quot;&quot;);dbf.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, &quot;&quot;);// or disable entity expansion but keep in mind that this doesn't prevent fetching external entities// and this solution is not correct for OpenJDK &lt; 13 due to a bug: https://bugs.openjdk.java.net/browse/JDK-8206132dbf.setExpandEntityReferences(false);// sonar compliant ---- end This accessibility update should be removed.错误代码1field.setAccessible(true); 解决方法使用反射工具类ReflectionUtils.makeAccessible替换 1ReflectionUtils.makeAccessible(field); This accessibility bypass should be removed.错误代码1field.set(obj, value); 解决方法使用 ReflectionUtils.setField替换 1ReflectionUtils.setField(field, obj, value); Use a primitive boolean expression here.错误代码1234// getFlag()可能为null，if会报错if (test.getFlag()) { xxxx} 解决方法123if (Boolean.TRUE.equals(test.getFlag())) { xxxx} Merge the previous cases into this one using comma-separated label.错误代码1234case a:case b: yyyyyyy break; 解决方法123case a, b: yyyyyyy break;","link":"/2023/03/06/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/sonarlint%E6%89%AB%E6%8F%8F%E7%BB%93%E6%9E%9C%E7%9A%84%E4%BF%AE%E5%A4%8D%E8%AE%B0%E5%BD%95/"},{"title":"web.xml中load-on-startup的作用","text":"load-on-startup 元素标记容器是否应该在web应用程序启动的时候就加载这个servlet，(实例化并调用其init()方法)。 它的值必须是一个整数，表示servlet被加载的先后顺序。 如果该元素的值为负数或者没有设置，则容器会当Servlet被请求时再加载。 如果值为正整数或者0时，表示容器在应用启动时就加载并初始化这个servlet，值越小，servlet的优先级越高，就越先被加载。值相同时，容器就会自己选择顺序来加载。","link":"/2023/03/01/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/web-xml%E4%B8%ADload-on-startup%E7%9A%84%E4%BD%9C%E7%94%A8/"},{"title":"关于webservice的理解","text":"背景本科的时候，专业内写网站，使用的完全是RestfulAPI，SpringBoot + RestController一把梭，所以我并没有接触过webservice这个概念。第一次遇到还是在项目里，一个满满年代感的项目与维护了十年的代码。 概念理清项目里的webservice，本质上也是RPC(Remote Procedure Call - 远程过程调用)，司空见惯的Client调用Server，跟平时调用API接口在定位上没什么区别。 最大的区别在于实施方法，webservice采用的是SOAP协议，并且会生成WSDL这个描述性文件。 WSDL(Web Services Description Language)就是用XML接口的描述性文件，里面的内容包括Server端的url、可调用的方法、方法需要的参数、方法返回的参数等。基本上可以看作一个全面的API doc。 SOAP(Simple Object Access Protocal - 简单对象访问协议)可以简单理解为Http + XML，扩展起来就是Http POST，将header中的一个属性Content-Type设置为text/XML，传输的文本就会被格式化为XML。SOAP封装的内容非常多，包括但不限于消息内容、发送对象、接收处理的的框架等。 UDDI(Universal Description, Discovery and Integration - 通用描述、发现与集成服务)是一种目录服务，通过它，企业可以使用它对 Web services 进行注册和搜索。目前大部分企业使用webservice并不是必须使用UDDI，因为用户通过WSDL知道了webservice的地址，可以直接通过WSDL调用webservice。 整个流程理顺下来就是，Server发布webservice，Client根据Server发布的webservice生成WSDL，发送符合要求的SOAP信息，成功调用Server。 利与弊与SOAP相比，JSON在传输层面轻量了太多。 举例返回调用结果为OK，在JSON下，只需要返回{&quot;result&quot;: &quot;OK&quot;}。 而在SOAP下，不得不返回大量的描述性文件。 12345678910&lt;?XML version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;SOAP:Envelope XMLns:xsi=&quot;Http://www.w3.org/2001/XMLSchema-instance&quot; XMLns:xsd=&quot;Http://www.w3.org/2001/XMLSchema&quot; XMLns:SOAP=&quot;Http://schemas.XMLSOAP.org/SOAP/envelope/&quot;&gt;&lt;SOAP:Body&gt;&lt;GetUserProfileTypesResponse XMLns=&quot;Http://zeeq.zune.net/&quot;&gt;&lt;GetUserProfileTypesResult&gt;&lt;userType&gt;unsignedByte&lt;/userType&gt;&lt;/GetUserProfileTypesResult&gt;&lt;/GetUserProfileTypesResponse&gt;&lt;/SOAP:Body&gt;&lt;/SOAP:Envelope&gt; 在JSON下，对结果描述不够准确。例如{&quot;price&quot;: 10000}这行代码，并没有指明10000是int、float又或是double，所以实际开发中不得不用{&quot;price&quot;: &quot;10000.00&quot;}这种字符串形式让前端自行解析。在XML中，所有的类型都有准确的描述，所以webservice在信息的传输上更精准。 尽管各有各的利弊，时代的推动下，webservice几乎只剩下保守的老项目还在坚守。简洁的webapi已经占据了当前的主流。","link":"/2022/12/06/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E5%85%B3%E4%BA%8Ewebservice%E7%9A%84%E7%90%86%E8%A7%A3/"},{"title":"字符串换行实际应用","text":"背景最近在 毎日のんびり日本語教師 网站上学习日语语法，其中的部分例句打算复制（摘抄）到Notion上作为笔记记录。但是奇怪的事情发生了 =&gt; 网站原文例句 粘贴到Notion之后 换行错乱了，很不开心。 =-= 解决问题思路利用Python脚本，调整字符串格式，给每段的换行前加上 “/n”。 代码1234567string = '''（１） 本当に好きな以上は仕方ない。 （如果真的喜欢那就没办法了。） （２） 給料を貰ってる以上は一生懸命やるのみ。 （既然领了工资，就只能拼命工作。）'''string = string.replace(&quot;（&quot;, &quot;\\n（&quot;) 此时，控制台输出的代码直接粘贴到Notion即可。 控制台 Notion 进阶方案从控制台里复制，然后再粘贴到Notion里，其实还是有点麻烦。所以找找方案，想办法解决掉复制这个费时间的操作。最终找到了 pyperclip 这个库。 改造一下代码，让运行结果直接复制到系统的剪贴板里。 123456789import pyperclipstring = '''（１） 本当に好きな以上は仕方ない。 （如果真的喜欢那就没办法了。） （２） 給料を貰ってる以上は一生懸命やるのみ。 （既然领了工资，就只能拼命工作。）'''string = string.replace(&quot;（&quot;, &quot;\\n（&quot;)pyperclip.copy(string) # 此时已经粘贴至粘贴板，直接粘贴即可。 后话其实仔细想想，打包一个GUI工具，包含文本框，change按钮，clear按钮，效率会更高。省的每次都要重新再代码里找位置粘贴。计划暂缓，有生之年吧。还是先过语言考试再说，奇淫技巧缓缓先=-=。","link":"/2022/12/29/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8D%A2%E8%A1%8C%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8/"},{"title":"Mac打开、编辑.bash_profile文件","text":"一般在Mac上配置环境变量时经常要创建、编辑.bash_profile文件。 创建该文件时一般都会选择在当前用户目录下，即Mac下的.bash_profile文件的路径是/Users/{YourMacUserName}/.bash_profile (如果该文件已经创建过的话) 1 创建 .bash_profile（1） 启动终端（2） 进入当前用户的home目录(默认就是)： cd ~ 或 cd /Users/{YourMacUserName}（3）输入touch .bash_profile 2 查看、编辑 .bash_profile 文件（1）终端输入 open -e .bash_profile （如果只是查看，直接使用open .bash_profile）（2）编辑（3）关闭即可保存修改 3 更新刚配置的环境变量 输入 source .bash_profile","link":"/2019/04/07/%E6%89%8B%E9%A1%BA/Mac%E6%89%93%E5%BC%80%E3%80%81%E7%BC%96%E8%BE%91-bash-profile%E6%96%87%E4%BB%B6/"},{"title":"TortoiseGit cherry-pick操作手顺","text":"1 cherry-pick说明cherry-pick指的是某分支提交的commit应用到其他分支。 2 场景说明同时拥有master分支和dev分支，通过cherry-pick将dev分支的commit合并到master。 3 操作手顺3.1 前期状态dev分支（较新） master分支（较旧） 3.2 执行操作切换到master分支（被追加commit的分支） 查看log 切换到dev分支的log（已经commit的分支） 选中要cherry-pick的对象，执行cherry-pick 查看master的log push到remote即可。","link":"/2022/11/28/%E6%89%8B%E9%A1%BA/TortoiseGit-cherry-pick%E6%93%8D%E4%BD%9C%E6%89%8B%E9%A1%BA/"},{"title":"Switch大气层系统升级","text":"升级准备 大气层固件包 Switch 固件包 升级过程重启机器，进入 Hekate 界面 -&gt; 工具 -&gt; USB工具 点击 SD 卡，并连接 USB 到电脑 备份数据（emuMMC 和 Nintendo 之外的文件夹都挪到本地备份）emuMMC是虚拟系统的数据Nintendo是Nintendo Switch系统的数据（如果没有 Nindoo 就只保留 emuMMC） 删除上述备份过的数据（emuMMC 和 Nintendo 之外的文件夹）复制大气层固件包和 Switch 固件包到 Switch 内存卡 红色边框内容保持原有不变。 绿色边框是 Switch 固件包，连带文件夹拷贝到根目录即可。 其他文件是大气层固件包的内容，拷贝到根目录即可。 弹出内存卡，进入大气层系统查看当前版本 进入DayBreak 升级后查看版本 此时版本已更新，升级成功 报错报错信息 报错原因MacOS 复制升级文件到 Switch 内存卡时会导入隐藏文件 解决方法连接USB，Mac上命令行运行 find /Volumes/Untitled/Firmware.18.1.0 -name &quot;.*&quot; -type f -delete 再次执行升级则会成功","link":"/2024/10/16/%E6%89%8B%E9%A1%BA/Switch%E5%A4%A7%E6%B0%94%E5%B1%82%E7%B3%BB%E7%BB%9F%E5%8D%87%E7%BA%A7/"},{"title":"TortoiseGit合并commit","text":"1 查看log 2 选择合并的commit -&gt; 右键 -&gt; Combine to one commit注：合并的commit必须是连续的，中间不能有中断。 3 更正修改后的commit履历 -&gt; commit 4 push注：如果更改的commit已经被push，需要勾选known changes（如下图）。如果只是本地commit则不需要勾选。 5 查看结果5.1 本地log 5.2 GitHub commit履历","link":"/2023/03/01/%E6%89%8B%E9%A1%BA/TortoiseGit%E5%90%88%E5%B9%B6commit/"},{"title":"TortoiseGit恢复git skip worktree","text":"1 右键打开Tortoise Git 2 勾选 3右键文件选择红框的","link":"/2022/11/28/%E6%89%8B%E9%A1%BA/TortoiseGit%E6%81%A2%E5%A4%8Dgit-skip-worktree/"},{"title":"TortoiseGit设置开机自启动，并自动加载SSH-KEY","text":"#TortoiseGit 问题描述：TortoiseGit无法使用git生成的ssh-key，需要转化为ppk 公钥。所以每次提交代码钱要打开 Pageant ，然后去加载公钥，非常麻烦。 解决方法：1. 打开Pagement的快捷方式图标开始 -&gt; TortoiseGit -&gt; Pagement -&gt; 更多 -&gt; 打开文件位置 2. 打开开机自启动文件夹win + R -&gt; 输入 shell:startup -&gt; 确定 3. 将Pagement图标拖至自启动文件夹 4. 拼接ppk路径右键图标 -&gt; 属性 -&gt; 快捷方式 -&gt; 目标 在后面加上privatekey.ppk的路径，记得与前面加一个空格。","link":"/2020/11/08/%E6%89%8B%E9%A1%BA/TortoiseGit%E8%AE%BE%E7%BD%AE%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%EF%BC%8C%E5%B9%B6%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BDSSH-KEY/"},{"title":"Windows下解除端口号被占用","text":"问题背景运行web项目的时候，忘记关闭上一个项目，然后直接运行下一个项目。上一个项目仍在运行中，端口号被占用。 解决方法直接在CMD中找到被占用端口号的进程id，结束进程运行。 window+R 输入cmd netstat -ano | findstr 端口号 taskkill /f /pid 进程id 截图","link":"/2021/05/19/%E6%89%8B%E9%A1%BA/Windows%E4%B8%8B%E8%A7%A3%E9%99%A4%E7%AB%AF%E5%8F%A3%E5%8F%B7%E8%A2%AB%E5%8D%A0%E7%94%A8/"},{"title":"hexo配置超链接下载","text":"在source文件夹下创建资源文件夹，比如download，然后将要下载的文件放入 文章里直接引用即可，例如[2020政府报告](/download/词云图/2020政府报告.zip)","link":"/2024/04/02/%E6%89%8B%E9%A1%BA/hexo%E9%85%8D%E7%BD%AE%E8%B6%85%E9%93%BE%E6%8E%A5%E4%B8%8B%E8%BD%BD/"},{"title":"Windows搭建Gosu开发环境","text":"背景目前的项目基于Guidewire框架，使用的开发语言是Gosu。在个人机器上搭建Gosu的开发环境用于学习语法特性。 环境搭建前期准备 IntelliJ IDEA 2019.3.5 OS Gosu插件（最新版仅支持2019.3.5，之后的版本无法导入至IDEA） Gosu运行环境（gosu-1.14.16-full.zip） JDK1.8 + （Gosu依赖基于JDK1.8 +） 配置手顺校验JDK在命令行中执行java -version，查看JDK版本是否 &gt; 1.8。 下载Gosu运行环境并解压缩https://gosu-lang.github.io/downloads.html IDEA中导入OS Gosu插件（本地导入或在线下载） 创建工程创建一个普通的Java工程Create New Project 2019.3.5版本的默认JDK为1.11，编译Gosu会产生doc警告，所以更正为JDK8 Next Finish 创建完成 导入Gosu依赖File -&gt; Project Structure Libraries -&gt; Java 选择步骤2.2.2解压缩完的文件夹下的所有依赖 jar 包 OK 创建Gosu类src -&gt; 右键 -&gt; New -&gt; Gosu类 随便写一个类名 创建完成 编写Gosu代码Main 类完整代码如下（代码块采用swift，因为Markdown不支持gs） 123456class Main { static function main(args: String[]) { print(&quot;hello&quot;) }} 运行右键 -&gt; Run 运行结果 Gosu完整文档https://gosu-lang.github.io/docs.html","link":"/2022/12/05/%E6%89%8B%E9%A1%BA/Windows%E6%90%AD%E5%BB%BAGosu%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"},{"title":"iOS配置Git同步Obsidian","text":"背景语雀收费之后，知识管理平台的选择又一次成为令我头痛的事。最初的印象笔记、之后的有道云、再然后的语雀。好用的工具层出不穷，但是一旦深入使用后迁移平台却是难上加难。所以我最终选择Obsidian这种全平台、本地、基于Markdown的数据管理工具。 由于使用的Mac+iPhone，所以iCloud与Obsidian搭配其实已经实现了跨平台的数据交互。但是既然已经跨平台了，且本身作为程序员，GIthub与Git才是我最信任的工具。借此也诞生了这篇文章，既如何利用Git，实现全平台版本管理与数据同步。 分析由于iOS端的文件管理与Obsidian的软件特性，Obsidian只能读取自己文件夹下的资料。 具体如图： 所以尽管iOS上有很多Git软件，但是如果不能打破文件管理这个层级的问题，Obsidian无法读取到git软件操作的文档仓库。毕竟这不是PC平台，Obsidian可以任意的打开被git管理的指定文件夹。 方案方案一 利用working copy将git仓库映射到Obsidian文件夹下具体操作：https://zhuanlan.zhihu.com/p/531516583 原理很简单，Obsidian既然只能读自己文件夹下的文件，那么利用working copy，将仓库share到Obsidian下的valut即可。 这个方法优点是操作简单，所有的git操作完全可以在working copy的GUI下完成。缺点也很明显，working copy买断价128元。 方案二 利用ish挂载Obsidian的valut，并生成git仓库ish是一个基于iOS的shell应用，在程序内可以调用linux命令操作iOS系统。核心操作如标题，将Obsidian的valut文件夹直接挂载到ish文件夹内，然后就可以肆意处理。ish本身是linux环境，自然可以安装git。 具体参照：https://zhuanlan.zhihu.com/p/565028534(不必完全参照知乎回答，有些步骤可以省略，只要考虑核心步骤即可。) 核心步骤： 下载 ish和Obsidian App 在 ish内，下载Git等软件 利用Linux下的mount命令挂载Obsidian下的文件夹 依托于Obsidian文件夹，git初始化（因为有.obsidian文件，无法直接clone），并关联远程仓库地址 正常pull / push即可（记得checkout选择分支） 这个方案最大的优点是免费，缺点是必须懂git和linux。因为所有的操作都是通过命令行实施，包括后续的文档内容更新。 体验截图PC端Git客户端 PC端Obsidian 移动端ish管理文档 移动端Obsidian","link":"/2022/12/01/%E6%89%8B%E9%A1%BA/iOS%E9%85%8D%E7%BD%AEGit%E5%90%8C%E6%AD%A5Obsidian/"},{"title":"newbee-mall-api部署手顺","text":"简介newbee-mall-api 是一个前后端分离商城系统的后端API接口。 项目地址https://gitee.com/newbee-ltd/newbee-mall-api 部署Clone代码 导入 SQL创建DBDB名：newbee_mall_db_v2（参照 application.properties -&gt; spring.datasource.url字段） 执行SQLSQL文件位置：newbee-mall-api\\src\\main\\resources\\newbee_mall_db_v2_schema.sql MySQL导入命令：source ※导入失败的解决方案 MySQL执行SQL脚本报错 ERROR 1231 (42000) 项目配置更改resources（newbee-mall-api\\src\\main\\resources）下关于DB的相关配置。 包括数据库地址、用户名、密码等。 利用mvn install打jar包 运行jar包 ※更多运行jar包形式参照 https://www.cnblogs.com/hxun/p/11325558.html 登录swagger查看接口","link":"/2023/01/10/%E6%89%8B%E9%A1%BA/newbee-mall-api%E9%83%A8%E7%BD%B2%E6%89%8B%E9%A1%BA/"},{"title":"删除博客园广告","text":"#博客园 1 实现方式利用博客内提供的开发者选项，设置广告对应的标签为不显示。 2 具体步骤设置 -&gt; 页面定制CSS代码 -&gt; 粘贴指定代码至输入框内 12345678910/*园子动态*/#under_post_card1{ display: none; overflow: hidden;}/*最新新闻*/#under_post_card2{ display: none; overflow: hidden;} 3 修正结果","link":"/2022/12/29/%E6%89%8B%E9%A1%BA/%E5%88%A0%E9%99%A4%E5%8D%9A%E5%AE%A2%E5%9B%AD%E5%B9%BF%E5%91%8A/"},{"title":"博客园添加正文Markdown目录","text":"#博客园 1 实现效果 2 所需插件压缩包合集 12345&lt;!-- 侧边滚动目录 --&gt;&lt;link href=&quot;https://blog-static.cnblogs.com/files/blogs/680998/cnblog-scroller.css&quot; type=&quot;text/css&quot; rel=&quot;stylesheet&quot;&gt;&lt;script src=&quot;https://blog-static.cnblogs.com/files/blogs/680998/scrollspy.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://blog-static.cnblogs.com/files/blogs/680998/stickUp.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://blog-static.cnblogs.com/files/blogs/680998/cnblog-scroller.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt; 3 具体实施3.1 上传插件设置 -&gt; 文件 -&gt; 上传 3.2 写入代码代码写入位置：页首 HTML 代码","link":"/2022/12/29/%E6%89%8B%E9%A1%BA/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E6%B7%BB%E5%8A%A0%E6%AD%A3%E6%96%87Markdown%E7%9B%AE%E5%BD%95/"},{"title":"博客搭建指南","text":"写在前面hexo本身是一个成熟的博客系统，所以简中互联网上关于搭建的帖子/博客铺天盖地。事实上hexo官网已经对应的插件官网即可解决大多数问题，其他平台（例如CSDN、掘金、Bilibili等）分享的帖子反而有可能有坑，所以尽可能围绕官网为主。 本地搭建 安装nodejs。nodejs官网：https://nodejs.org/zh-cn/ 安装hexo。hexo官网：https://hexo.io/zh-cn/ 关于hexo的使用说明及常用命令参考步骤2的官网即可。（大致操作如下） 其他配置 主题采用的icarus，说明文档也是用github page完成。最新的icarus主题支持npm install一键安装。 本地编辑器用的VSCode，为了方便使用，最好对工程加以改造。 source下新建images文件夹作为图片根路径（与_posts平级） 粘贴图片使用Paste Image插件，设置images文件夹为粘贴路径 评论系统使用的是utterances，利用issue实现评论与关联。具体参照https://utteranc.es 发布优化github page发布的是静态页面，hexo原生的hexo d虽然可以一键发布，但是并不适合文档的git管理。一旦换了电脑，工程同步很麻烦。 引入了github action之后，工作流演变成 hexo n新建文档 写完push到main分支 github action调用hexo d将静态资源发布到gh-pages分支上 github page动态更新 具体实施与yml可参照官网 常用命令1234# 创建markdownhexo n xxxxxxxxxxxxxx(文件名)# 清空缓存，发布本地服务hexo clean &amp;&amp; hexo s VSCode自动生成文件夹的粘贴插件：Paste Image 粘贴快捷键：command + option + v 补充说明如果不愿意像官网一般公开Markdown文档到github.io仓库，可以文档单独存放在另一个私有仓库，将生成的资源单独推送到github.io仓库。 推送权限依赖ssh密钥，需要将id_rsa文件作为变量存放到github中，但是一定要注意是包含开头和结尾的-----BEGIN RSA PRIVATE KEY-----与-----END RSA PRIVATE KEY-----。（踩坑许久） 12345-----BEGIN RSA PRIVATE KEY-----MIIJKAIBAAKCAgEAtgogG4V42h1XxZcaqHW1j6dG7UcOxNSSXOXNOFr0soTCyUqg....u+n08VOXbUSHb5udtFbNiF8si7JYG1ng/63r6wRsPjgc+5ePLatHhNGx+hw=-----END RSA PRIVATE KEY-----","link":"/2022/12/18/%E6%89%8B%E9%A1%BA/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/"},{"title":"知乎禁止转载资料剪辑方案.md","text":"前提知乎文章禁止转载。 测试文章地址https://www.zhihu.com/question/22613022/answer/1339783823 环境：Windows10，Firefox浏览器（其他浏览器应该也可以）。 解决方案1. 右键，检查元素对准要剪辑的文章，右键，检查元素。 会出现页面所处的元素。 2. 复制所需的元素选中&lt;span&gt;层级，右键，复制，整体HTML。 3. 新建一个HTML文件右键，新建文本文档，将txt后缀改成html。 将步骤3复制的内容粘贴进去，保存并退出。 4. 利用浏览器打开HTML文件 注意： 部分图片处理不到位，建议手动一个个处理。推荐将页面的文字复制到语雀/word等文字处理工具中。","link":"/2022/11/30/%E6%89%8B%E9%A1%BA/%E7%9F%A5%E4%B9%8E%E7%A6%81%E6%AD%A2%E8%BD%AC%E8%BD%BD%E8%B5%84%E6%96%99%E5%89%AA%E8%BE%91%E6%96%B9%E6%A1%88/"},{"title":"英文键盘日语布局解决方案","text":"问题描述英文的键盘，在日文输入法下，布局是按照日文的布局。这导致很多符号与常用的不一样，比如@。 解决方法","link":"/2023/03/18/%E6%89%8B%E9%A1%BA/%E8%8B%B1%E6%96%87%E9%94%AE%E7%9B%98%E6%97%A5%E8%AF%AD%E5%B8%83%E5%B1%80%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"},{"title":"退出他人Github仓库的方法","text":"退出方法 点击右上角的头像 点击Settings 点击左边的Repositories 找到要退出的项目，点击右边的Leave 截图示例","link":"/2023/06/18/%E6%89%8B%E9%A1%BA/%E9%80%80%E5%87%BA%E4%BB%96%E4%BA%BAGithub%E4%BB%93%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95/"},{"title":"ConfigParser读取properties","text":"ConfigParser读取properties文件时，properties文件必须有默认的头，例如[default],如果没有会报错。 因为ConfigParser默认是读取ini格式文件，ini文件必须有section header。properties虽然也是key=value格式，但是不强制section header。 解决方式是读取内容后手动加上header，然后交给ConfigParser解析。 1234content = &quot;[default]\\n&quot; + open(bathPath + &quot;\\\\&quot; + file).read()config = ConfigParser(allow_no_value=True)config.read_string(content)value = config.get('default', key)","link":"/2023/04/12/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/ConfigParser%E8%AF%BB%E5%8F%96properties/"},{"title":"Dozer-List-DO与VO转换","text":"123456789101112131415161718import java.util.ArrayList;import java.util.List;import org.dozer.Mapper;public class DozerUtils { /** * Encapsulate the method of dozer processing set: List &lt; s &gt; &gt; &gt; &lt; T &gt; List */ public static &lt;T, S&gt; List&lt;T&gt; mapList(final Mapper mapper, List&lt;S&gt; sourceList, Class&lt;T&gt; targetObjectClass) { List&lt;T&gt; targetList = new ArrayList&lt;T&gt;(); for (S s : sourceList) { targetList.add(mapper.map(s, targetObjectClass)); } return targetList; }}","link":"/2022/12/29/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/Dozer-List-DO%E4%B8%8EVO%E8%BD%AC%E6%8D%A2/"},{"title":"Eclipse中，中文变成繁体字","text":"问题描述：在Eclipse中打字，突然注释代码只能打出来繁体字。 截图： 问题出现的原因Eclipse中，格式化代码 Ctrl + Shift + F，同时是搜狗的简繁体转换快捷键。 解决方案再按一次格式化代码（Ctrl + Shift + F），然后去搜狗里将简繁体转换快捷键更换。 关闭搜狗简繁体转换方案1. 右键输入法 -&gt; 属性设置 2. 高级 -&gt; 系统功能快捷键 3. 关闭简繁切换 关联问题Eclipse格式化代码失效","link":"/2023/02/05/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/Eclipse%E4%B8%AD%E6%96%87%E5%8F%98%E6%88%90%E7%B9%81%E4%BD%93%E5%AD%97/"},{"title":"Eclipse中文注释异常","text":"问题描述：Eclipse中文注释与星号配合的适合显示会异常。 出现问题的原因：Eclipse内置字体对中文支持有限。 解决方法：更改字体为中文字体。(默认系统字体) 12345Window -&gt; Perferences -&gt;左侧General -&gt; Appearance -&gt; Colors and Fonts -&gt;右侧Basic -&gt; Text Font -&gt; Use System Font 推荐字体：Courier New","link":"/2022/11/29/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/Eclipse%E4%B8%AD%E6%96%87%E6%B3%A8%E9%87%8A%E5%BC%82%E5%B8%B8/"},{"title":"Eclipse格式化代码失效","text":"原因Ctrl + shift + F 跟Windows原生输入法的简繁体转换冲突，需要关闭输入法的简繁体转换。 截图 关联问题Eclipse中，中文变成繁体字","link":"/2023/02/05/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/Eclipse%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%BB%A3%E7%A0%81%E5%A4%B1%E6%95%88/"},{"title":"FileZilla下载失败","text":"问题描述FileZilla 不能下载，已经连接服务器， 但右键的下载显示灰色。 解决方案先在左侧要存放的路径点击进去 然后再点右边的文件点击下载。 截图","link":"/2021/03/18/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/FileZilla%E4%B8%8B%E8%BD%BD%E5%A4%B1%E8%B4%A5/"},{"title":"Junit测试通过，MavenTest测试未通过","text":"Run Unit Test和Maven test的区别差异1：在IDE中通过选中单元测试路径，点击右键选择run test和点击maven中的test是有区别的。在Maven执行测试的过程中，是不允许测试cases访问其他项目的测试类和其他项目的resources下文件的。也就是说，在a/src/test/java下的测试用例，是不能引用b/src/test/java中的类的，同时也不允许访问b/src/test/resources下的资源的。但是在IDE中的Run Unit Test几乎是没有这样的限制的。 差异2：Maven强制要求src/test/java下不能存在resource的文件，必须放到src/test/reources文件夹下，但是IDE却很少有对应的约束。 解决方法在maven插件配置：（surefire2.14以下版本）12345678&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.12&lt;/version&gt; &lt;configuration&gt; &lt;forkMode&gt;always&lt;/forkMode&gt; &lt;/configuration&gt;&lt;/plugin&gt; 重点加入configureation的配置部分 在maven插件配置：（surefire2.14及其以上版本）123456789&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.19.1&lt;/version&gt; &lt;configuration&gt; &lt;reuseForks&gt;false&lt;/reuseForks&gt; &lt;forkCount&gt;1&lt;/forkCount&gt; &lt;/configuration&gt;&lt;/plugin&gt; 在2.14以上的版本中，forkMode配置项已经废弃了。","link":"/2023/06/18/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/Junit%E6%B5%8B%E8%AF%95%E9%80%9A%E8%BF%87%EF%BC%8CMavenTest%E6%B5%8B%E8%AF%95%E6%9C%AA%E9%80%9A%E8%BF%87/"},{"title":"Git修改远程仓库连接","text":"背景github desktop没找到强制push的功能，所以用命令行来解决问题。但是用命令的时候发现remote是http而不是ssh，push失败并报错： 123remote: Support for password authentication was removed on August 13, 2021.remote: Please see https://docs.github.com/en/get-started/getting-started-with-git/about-remote-repositories#cloning-with-https-urls for information on currently recommended modes of authentication.fatal: Authentication failed for 'https://github.com/wyue1227/wyue1227.github.io.git/' 解决方法12345678# 初次查看git remote -v;# 设置remote为sshgit remote set-url origin git@github.com:wyue1227/wyue1227.github.io.git# 确认git remote -v;","link":"/2022/12/11/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/Git%E4%BF%AE%E6%94%B9%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E8%BF%9E%E6%8E%A5/"},{"title":"Mac下初次打开App点击取消导致无法再打开","text":"打开终端 输入sudo xattr -d com.apple.quarantine /Applications/PyCharm.app（根据app不同最后更正为不同的名字）","link":"/2022/11/28/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/Mac%E4%B8%8B%E5%88%9D%E6%AC%A1%E6%89%93%E5%BC%80App%E7%82%B9%E5%87%BB%E5%8F%96%E6%B6%88%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E5%86%8D%E6%89%93%E5%BC%80/"},{"title":"MySQL执行SQL脚本报错 ERROR 1231 (42000)","text":"错误场景登录MySQL，利用source命令导入sql文件时报错。 错误截图 解决方法在sql文件前加入下面注释： 12345678910/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;/*!40101 SET NAMES utf8 */;/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;/*!40103 SET TIME_ZONE='+00:00' */;/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */; 示例","link":"/2023/01/10/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/MySQL%E6%89%A7%E8%A1%8CSQL%E8%84%9A%E6%9C%AC%E6%8A%A5%E9%94%991231(42000)/"},{"title":"NotNull等校验注解不生效","text":"背景学习SpringBoot项目中，单元测试时发现@NotNull等注解没有生效。 原因没有在调用处添加@Validated和@Valid注解。 示例Entity1234public Class User { @NotBlank(message = &quot;用户名不能为空&quot;) private String username;} 调用 Controller类上添加@Validated注解。 如果是Entity类型的校验，需要在参数前加上@Valid。普通类型（如String）则不用。 12345@Validatedpublic class UserController { public String getUsername(@Valid User user) {} public String getStr(@NotNull String str) {}}","link":"/2022/06/18/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/NotNull%E7%AD%89%E6%A0%A1%E9%AA%8C%E6%B3%A8%E8%A7%A3%E4%B8%8D%E7%94%9F%E6%95%88/"},{"title":"OpenPyXL爬坑_第二弹","text":"这是一段平平无奇的代码，用于获取冻结单元格 123456789import shutilimport openpyxlpath = &quot;/Users/xxx/Documents/tmp/openPyXLTest.xlsx&quot;wb = openpyxl.load_workbook(path)sheet = wb[&quot;Sheet&quot;]print(sheet.freeze_panes)wb.close() 文件内容如下 执行效果如下 看上去一切正常 但是当文件滚动条变更之后，如图 它的执行结果就变成了 没错，只要滚动条滚动了，取出来的值就是不正确的。如同源码展示的，它只会取 topLeftCell ,而这个值只会在加载的时候初始化，所以冻结的单元格行数，并不能准确取到。 已提交issue，期待回复 https://foss.heptapod.net/openpyxl/openpyxl/-/issues/2119 回复结果： 应该使用sheet.sheet_view.pane.ySplit获取冻结行数 输出结果 3.0","link":"/2023/12/04/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/OpenPyXL%E7%88%AC%E5%9D%91-%E7%AC%AC%E4%BA%8C%E5%BC%B9/"},{"title":"OpenPyXL爬坑","text":"背景接到需求，批量修改式样书的表纸页和履历页。本以为是简单的改动，但是深深踩了OpenPyXL的坑。 测试代码1234567891011import shutilfrom openpyxl import load_workbookpath = &quot;/Users/xxx/Documents/tmp/openPyXLTest.xlsx&quot;copyFile = &quot;/Users/xxx/Documents/tmp/openPyXLTest2.xlsx&quot;shutil.copy(path, copyFile)wb = load_workbook(copyFile)wb.save(copyFile)wb.close() 运行结果 图形问题解决根据运行结果可以看出，只是简单的打开、关闭一个 excel 文件，会导致图片以及图形的丢失。 针对图形丢失在网上有很明确的说明，openpyxl 使用 Pillow 处理图片，所以需要安装 Pillow pip install Pillow 安装 Pillow 之后，运行结果如下 图形依然丢失 去 OpenPyXL 仓库上翻了翻，这居然是一个陈年老bug https://foss.heptapod.net/openpyxl/openpyxl/-/issues/1268 彻底解决使用 xlwings 库或者直接使用 VBA xlwings: https://docs.xlwings.org/en/latest/quickstart.html# xlwings示例1234567891011import shutilimport xlwings as xwpath = &quot;/Users/xxx/Documents/tmp/openPyXLTest.xlsx&quot;copyFile = &quot;/Users/xxx/Documents/tmp/openPyXLTest3.xlsx&quot;shutil.copy(path, copyFile)wb = xw.Book(copyFile)wb.save(copyFile)wb.close()print(&quot;done&quot;)","link":"/2023/11/22/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/OpenPyXL%E7%88%AC%E5%9D%91/"},{"title":"SpringBoot解决跨域问题","text":"跨域问题前后端分离的时候出现了跨域问题。。。。虽然可以用Jsonp的方式解决，但是axios推荐利用CORS方式解决。 解决方法添加一个拦截器 12345678910111213141516171819202122232425262728293031323334353637package com.wordcard.filter;import org.springframework.stereotype.Component;import javax.servlet.*;import javax.servlet.http.HttpServletResponse;import java.io.IOException;/** * @author 19745 */@Componentpublic class CORSFilter implements Filter { @Override public void init(FilterConfig filterConfig) throws ServletException { } @Override public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException { HttpServletResponse response = (HttpServletResponse) res; response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;); response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, GET, OPTIONS, DELETE,PUT&quot;); response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;); response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;accept,x-requested-with,Content-Type&quot;); response.setHeader(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;); chain.doFilter(req, res); } @Override public void destroy() { }}","link":"/2022/12/28/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/SpringBoot%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"},{"title":"Python报错UnicodeDecodeError","text":"背景Python IO读取文件时报错UnicodeDecodeError: ‘gbk’ codec can’t decode byte... 错误原因如同报错信息，Unicode解码失败。根本原因是文件中有汉字/日文等其他文字不能用gbk打开。 解决方法利用utf-8格式打开 1file = open(filename, encoding=&quot;utf8&quot;)","link":"/2023/02/14/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/Python%E6%8A%A5%E9%94%99UnicodeDecodeError/"},{"title":"final无法阻止数组值变换","text":"final是引用不可变，值还是可以改变的。 1234567891011121314151617181920public class App { public static final String[] array = {&quot;1&quot;, &quot;2&quot;}; public static void main(String[] args) throws Exception { for (int i = 0; i &lt; array.length; i ++) { System.out.print(array[i] + &quot; &quot;); } System.out.print(&quot;\\n&quot;); array[0] = &quot;3&quot;; for (int i = 0; i &lt; array.length; i ++) { System.out.print(array[i] + &quot; &quot;); } }}// 输出结果// 1 2 // 3 2","link":"/2023/03/06/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/final%E6%97%A0%E6%B3%95%E9%98%BB%E6%AD%A2%E6%95%B0%E7%BB%84%E5%80%BC%E5%8F%98%E6%8D%A2/"},{"title":"Typora内删除超链接下划线","text":"背景用Markdown写个人简历的时候，邮箱会自动转换成超链接的形式。如果邮箱里带下划线会跟超链接的下划线样式冲突。 解决方法1. 打开Typora主题配置（偏好-&gt;外观） 2. 打开github.css文件 3. 查找a标签，添加删除下划线代码1234a { color: #4183C4; text-decoration: none;} 4. 重新打开Typora","link":"/2022/11/29/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/Typora%E5%86%85%E5%88%A0%E9%99%A4%E8%B6%85%E9%93%BE%E6%8E%A5%E4%B8%8B%E5%88%92%E7%BA%BF/"},{"title":"gitignore忽略.idea无效","text":"发生原因idea创建工程时已经将它存储进暂存区。 解决方法利用 git rm --cached 从索引中删除.idea文件。","link":"/2021/07/08/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/gitignore%E5%BF%BD%E7%95%A5-idea%E6%97%A0%E6%95%88/"},{"title":"java外字处理爬坑","text":"背景日语内外字不在常规Unicode编码集内，需要手动更换成编码集内的文字。 坑点外字在本地文档/服务器文档编码集符合文档提供的规则，但是在Stream流内会自动解析成\\\\uFFFD\\\\uxxxx。例如SJIS编码下F141的文字，在UTF8下编码为E08D，但是进入Stream流后变成了\\\\uFFFD\\\\u0041，所以要在代码内实际确认一下对应的编码。同时因为外字转成了\\\\uFFFD\\\\uxxxx，所以位数变成了2位，而且外字变换常规字符后可能会由一个字符变成多个字符，对应Byte的切分要注意位数变更。 相关代码段打印字符串unicode编码1234567public static void printUnicode(String str) { for (int i = 0; i &lt; str.length(); i++) { char c = str.charAt(i); System.out.printf(String.format(&quot;\\\\u%04X &quot;, (int) c)); } System.out.println();} 变换外字12345678910Map&lt;String, String&gt; convertMap = new HashMap&lt;&gt;(); convertMap.put(&quot;\\\\uFFFD\\\\u0041&quot;, &quot;さい&quot;); convertMap.put(&quot;\\\\uFFFD\\\\u0042&quot;, &quot;そね&quot;); for (Map.Entry&lt;String, String&gt; entry : convertMap.entrySet()) { String key = entry.getKey(); String value = entry.getValue(); // repaceAll支持直接变换Unicode String info = info.replaceAll(key, value); }","link":"/2023/05/25/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/java%E5%A4%96%E5%AD%97%E5%A4%84%E7%90%86%E7%88%AC%E5%9D%91/"},{"title":"执行yum提示错误 thread died in berkeley db library","text":"问题描述在执行yum安装或者其他命令时，有如下提示： 解决方法123456[root@VM-0-14-centos /]# cd /var/lib/rpm[root@VM-0-14-centos rpm]# lsBasenames __db.001 __db.003 Group Name Packages Requirename Sigmd5Conflictname __db.002 Dirnames Installtid Obsoletename Providename Sha1header Triggername[root@VM-0-14-centos rpm]# rm -rf __db*[root@VM-0-14-centos rpm]# rpm --rebuilddb","link":"/2022/12/28/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/%E6%89%A7%E8%A1%8Cyum%E6%8F%90%E7%A4%BA%E9%94%99%E8%AF%AFthread-died-in-berkeley-db-library/"},{"title":"时间戳四舍五入","text":"因为项目原因，api返回的结果是6位毫秒（2023-04-12 20:56:31.589183），而存储到db然后导出是3位数毫秒（2023-04-12 20:56:31.589）。 这里牵扯到四舍五入，所以不能单纯截取，需要加500毫秒。 123456from datetime import datetime, timedeltatime_str = &quot;2023-04-07 18:14:45.589183&quot;dt = datetime.strptime(time_str, &quot;%Y-%m-%d %H:%M:%S.%f&quot;)new_dt = dt + timedelta(microseconds=500)new_time_str = new_dt.strftime(&quot;%Y-%m-%d %H:%M:%S.%f&quot;)[:-3]print(new_time_str)","link":"/2023/04/12/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/%E6%97%B6%E9%97%B4%E6%88%B3%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5/"},{"title":"测试抽象类的私有方法","text":"问题直接invoke抽象类的mock对象会空指针异常。 抽象类12345678public abstract class Base { protected abstract String getName(); private String getHi(String v) { return &quot;Hi &quot; + v; }} 解决方法1234567891011121314151617181920public class Child extends Base { protected String getName() { return &quot;Hello World&quot;; }}public class test() { @Test public void testMethod() { Child child = new Child(); try { Method method = Base.class.getDeclaredMethod(&quot;getHi&quot;, String.class); method.setAccessible(true); String output = (String) method.invoke(child, &quot;Tuk&quot;); System.out.println(output); } catch (Exception e) { e.printStackTrace(); } }}","link":"/2022/12/29/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/%E6%B5%8B%E8%AF%95%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95/"},{"title":"词云图生成","text":"代码段123456789101112131415161718192021222324import jiebafrom wordcloud import WordCloudfrom matplotlib.pyplot import imreadtext = open(&quot;2020政府报告.txt&quot;).read()font = &quot;simhei.ttf&quot;# 背景图片mask = imread(&quot;background.jpg&quot;)cut = jieba.cut(text) # text为你需要分词的字符串/句子result = ' '.join(cut) # 将分开的词用空格连接# 剔除掉的关键词exclude = {'我们', '今年', '同志', '我国'}wc = WordCloud(collocations=False, # 避免重复单词 font_path=font, # 设置字体 mask=mask, # 设置背景 background_color=&quot;white&quot;, # width=1400, height=1400, margin=2, # 图像宽高，字间距 stopwords=exclude)wc.generate(result)wc.to_file('2020政府报告.png') 引用模块import jieba：中文词解析。from wordcloud import WordCloud：词云图模块，用于生成词云图。from matplotlib.pyplot import imread：图片加载。 数据源background2020政府报告 运行结果设置背景版本 默认版本","link":"/2020/02/02/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/%E8%AF%8D%E4%BA%91%E5%9B%BE%E7%94%9F%E6%88%90/"},{"title":"git stash误删除后找回","text":"背景stash list在脑子不清醒的时候误删除了，要找回内容。 解决步骤1 git fsck –lost-found（列出删除的commit） 2 git show + &lt;sha&gt;逐个commit查看，直到找到误删的commit。 3 git merge + &lt;sha&gt;找回误删除的代码。 4 git reset如果不打算提交，还原索引至上一版本。","link":"/2023/02/05/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/GitStash%E8%AF%AF%E5%88%A0%E9%99%A4%E5%90%8E%E6%89%BE%E5%9B%9E/"},{"title":"PostgreSQL入门","text":"常用sql创建user并赋予指定数据库权限12345678-- 创建用户 dbuesr / passwordcreate USER dbuser with PASSWORD 'password';-- 赋予dbuser对testa的权限grant USAGE on SCHEMA public to dbuser;-- 撤销用户对testa的所有权限REVOKE ALL ON testa FROM dbuser;-- 撤销用户scheam的使用权限REVOKE ALL ON SCHEMA public FROM test; 批量为某列每个值前加0如果是MySQL正常使用CONCAT即可，例如 UPDATE students SET grade = CONCAT('0', grade) 在postgresql中可以使用 || UPDATE students SET grade = '0' || grade 12345678910111213141516before+----+-----------+----------+-------+ | id | first_name| last_name| grade | +----+-----------+----------+-------+ | 1 | Alice | Smith | 85 | | 2 | Bob | Johnson | 90 | | 3 | Charlie | Brown | 80 | +----+-----------+----------+-------+ after+----+-----------+----------+-------+ | id | first_name| last_name| grade | +----+-----------+----------+-------+ | 1 | Alice | Smith | 085 | | 2 | Bob | Johnson | 090 | | 3 | Charlie | Brown | 080 | +----+-----------+----------+-------+ 安装扩展数据库 -&gt; 右键 -&gt; Query Tool -&gt; 粘贴扩展sql并执行 测试","link":"/2023/03/06/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/PostgreSQL%E5%85%A5%E9%97%A8/"},{"title":"java编程思想第四版_第四章练习十_吸血鬼数答案","text":"题目 说明网上找了找各种答案，感觉怪怪的。大多用了各种字符串转换，自带的sort排序之类的。 初入编程做这个题目的新人应该还不懂这些，刚刚学完基本的+-*/%，所以写了这篇希望能帮助到新人。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105package example;/* * 输出结果： * 1395=15*93 * 1260=21*60 * 1827=21*87 * 2187=27*81 * 1530=30*51 * 1435=35*41 * 6880=80*86*/public class Example4_10 { public static void main(String[] args) { int[] array1 = new int[4]; int[] array2 = new int[4]; for (int i = 10; i &lt; 100; i++) { for (int j = i + 1; j &lt; 100; j++) { int resultNum = i * j; if (resultNum &lt; 1000) { continue; } // 取i的十位和个位 array1[0] = i/10; array1[1] = i%10; // 取j的十位和个位 array1[2] = j/10; array1[3] = j%10; // 取乘积的千位、百位、十位和个位 array2[0] = resultNum/1000; array2[1] = resultNum/100%10; array2[2] = resultNum/10%10; array2[3] = resultNum%10; if (checkZero(array2[2], array2[3]) &amp;&amp; sortAndCompareDif(array1) &amp;&amp; sortAndCompareDif(array2) &amp;&amp; arraysEquals(array1, array2)) { System.out.println(resultNum + &quot;=&quot; + i + &quot;*&quot; + j); } } } } /** * 判断乘积最后两位是否为零 * @param num1 乘积第三位 * @param num2 乘积第四位 * @return 都为零返回false，否则返回true */ private static boolean checkZero(int num1, int num2) { return num1 == 0 &amp;&amp; num2 == 0 ? false : true; } /** * 排序的同时，判断是否有出现次数大于三的数 * @param nums 数组传值 * @return 判断每个值唯一的结果 */ private static boolean sortAndCompareDif(int[] nums) { for (int i = 0; i &lt; nums.length - 1; i++) { int count = 0; int tmp =i; for (int j = i + 1; j &lt; nums.length; j++) { if (nums[j] &lt; nums[tmp] ) { tmp = j; } else if (i &lt; 2 &amp;&amp; nums[j] == nums[i]) { count += 1; } } if (count &lt; 2) { int tmpNum = nums[tmp]; nums[tmp] = nums[i]; nums[i] = tmpNum; } else { return false; } } return true; } /** * 比较两个数组是否相同 * @param nums1 数组1 * @param nums2 数组2 * @return 返回比对结果 */ private static boolean arraysEquals(int[] nums1, int[] nums2) { if (nums1.length != nums2.length) { return false; } for (int index = 0; index &lt; nums1.length; index ++) { if (nums1[index] != nums2[index]) { return false; } } return true; }}","link":"/2020/03/22/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E7%AC%AC%E5%9B%9B%E7%89%88-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E7%BB%83%E4%B9%A0%E5%8D%81-%E5%90%B8%E8%A1%80%E9%AC%BC%E6%95%B0%E7%AD%94%E6%A1%88/"},{"title":"测试程序运行时间","text":"程序本体123456789101112131415161718192021222324252627package com.example.util;import java.time.LocalDateTime;public class TimeUtil { public interface Task { void execute(); } public static void check(String title, Task task) { if (task == null) { return; } title = (title == null) ? &quot;&quot; : (&quot;[&quot; + title + &quot;]&quot;); System.out.println(title); System.out.println(&quot;开始：&quot; + LocalDateTime.now()); long beginTime = System.currentTimeMillis(); task.execute(); long endTime = System.currentTimeMillis(); System.out.println(&quot;结束：&quot; + LocalDateTime.now()); double delta = (endTime - beginTime) / 1000.0; System.out.println(&quot;耗时：&quot; + delta + &quot;秒&quot;); System.out.println(&quot;=========&quot;); }} 调用12345678910111213141516171819package com.example;import com.example.util.TimeUtil;public class Main { public static void main(String[] args) { TimeUtil.check(&quot;testAdd&quot;, new TimeUtil.Task() { @Override public void execute() { long res = 0; for (long i = 0; i &lt; 1000000000; i ++) { res += i; } System.out.println(res); } }); }} 运行结果 Python直接用time库就行12345678import time# 程序开始时的时间time_start = time.time()# 程序结束时系统时间time_end = time.time()# 两者相减print('totally cost', time_end - time_start)","link":"/2022/12/29/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/%E6%B5%8B%E8%AF%95%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/"},{"title":"自定义RequestBodyAdvice实现接口打印","text":"注意：只能接受@RequestBody类型的input参数。 Controller12345678910111213package com.example.demo.demos.web;import org.springframework.web.bind.annotation.*;@RestControllerpublic class BasicController { @RequestMapping(&quot;/hello&quot;) @ResponseBody public String hello(@RequestBody String name) { return &quot;Hello &quot; + name; }} Advice123456789101112131415161718192021222324252627282930313233343536373839404142package com.example.demo.demos.web;import lombok.extern.slf4j.Slf4j;import org.springframework.core.MethodParameter;import org.springframework.http.HttpInputMessage;import org.springframework.http.converter.HttpMessageConverter;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestControllerAdvice;import org.springframework.web.servlet.mvc.method.annotation.RequestBodyAdvice;import java.io.IOException;import java.lang.reflect.Type;import java.util.Arrays;@Slf4j@RestControllerAdvicepublic class RequestBodyAdviceImpl implements RequestBodyAdvice { @Override public boolean supports(MethodParameter methodParameter, Type targetType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType) { return true; } @Override public HttpInputMessage beforeBodyRead(HttpInputMessage inputMessage, MethodParameter parameter, Type targetType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType) throws IOException { RequestMapping requestMapping = parameter.getMethodAnnotation(RequestMapping.class); log.info(&quot;url: &quot; + Arrays.toString(requestMapping.value())); log.info(&quot;method: &quot; + parameter.getExecutable()); return inputMessage; } @Override public Object afterBodyRead(Object body, HttpInputMessage inputMessage, MethodParameter parameter, Type targetType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType) { log.info(&quot;param: &quot; + body); return body; } @Override public Object handleEmptyBody(Object body, HttpInputMessage inputMessage, MethodParameter parameter, Type targetType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType) { log.info(&quot;body: body is Empty&quot;); return body; }} 执行结果","link":"/2023/10/07/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/%E8%87%AA%E5%AE%9A%E4%B9%89RequestBodyAdvice%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3%E6%89%93%E5%8D%B0/"},{"title":"2024.9.2东软面试记录","text":"算法篇(正常应该用Java做，Python代码比较短，直接写Python版本的) 题目一input一个列表，内容是成绩，output一个列表，结果是对应的排名 12345678910111213141516# input: [90, 85, 90, 95]# output: [2, 3, 2, 1]data = [90, 85, 90, 95]# 1. 排序并去重sorted_unique_data = sorted(set(data), reverse=True)# 2. 构造mappingmapping = {value: rank + 1 for rank, value in enumerate(sorted_unique_data)}# 3. 根据mapping构造结果result = [mapping[score] for score in data]print(result)# [2, 3, 2, 1] 题目二给定一个dto list，里面包含年级、成绩、姓名，求出每个年级的平均成绩 1234567891011121314151617181920dto_list = [ {&quot;grade&quot;: 10, &quot;score&quot;: 85, &quot;name&quot;: &quot;Alice&quot;}, {&quot;grade&quot;: 10, &quot;score&quot;: 90, &quot;name&quot;: &quot;Bob&quot;}, {&quot;grade&quot;: 11, &quot;score&quot;: 75, &quot;name&quot;: &quot;Charlie&quot;}, {&quot;grade&quot;: 11, &quot;score&quot;: 80, &quot;name&quot;: &quot;David&quot;}, {&quot;grade&quot;: 12, &quot;score&quot;: 95, &quot;name&quot;: &quot;Eve&quot;}]grade_scores: dict[int, dict[str, int]] = {}for dto in dto_list: grade = dto[&quot;grade&quot;] score = dto[&quot;score&quot;] if grade not in grade_scores: grade_scores[grade] = {&quot;total_score&quot;: 0, &quot;count&quot;: 0} grade_scores[grade][&quot;total_score&quot;] += score grade_scores[grade][&quot;count&quot;] += 1for grade in grade_scores: avg_score = grade_scores[grade][&quot;total_score&quot;] / grade_scores[grade][&quot;count&quot;] print(f&quot;年级 {grade} 的平均成绩是: {avg_score:.2f}&quot;) SQL 篇算法篇题目二的内容构成一张表，取出各年级平均成绩 1234567SELECT grade, AVG(score) AS average_scoreFROM studentsGROUP BY grade; 很简单，但是我忘记 SQL 语法了。。。没答上来，确实太久没写了😭 Java篇题目一 值引用的问题。基本数据类型会被改变，引用类型只会改变地址，不会改变对象。 12345678910111213141516public class Main { public static void main(String[] args) { String s = &quot;123&quot;; int a = 1; changeString(s); changeInt(a); System.out.println(s); // 123 System.out.println(a); // 1 } public static void changeString(String tmp) { tmp = &quot;234&quot;; } public static void changeInt(int tmp) { tmp = 3; }} 想要改变值只能 return 改变。 题目二 final 作用在类、方法、常量上分别有什么作用答案 12341. 修饰常量，值不可变 2. 修饰对象，值可变，引用不变3. 修饰方法，方法不可重写4. 修饰类，无子类不可以被继承,更不可能被重写 之前确实没想过修饰对象的问题，记录一下 12345678910111213141516class Test { void print() { System.out.println(&quot;test&quot;); }}public class Main { public static void main(String[] args) { final Test a = new Test(); a = new Test(); }}// Main.java:10: error: cannot assign a value to final variable a// a = new Test();// ^// 1 error 测试篇问题一以 UT 为例，怎么保证测试分支全部覆盖？ 1利用 True/False 标注以及 Jacoco 等测试工具综合判断。 问题二IT 的 Case 是自己写的吗？根据什么写的？ 1根据画面 シナリオ 编写。 问题三A &amp;&amp; B || C，这种条件下，如果 A 是 True、B 是 False、C 是 True，最终结果是什么？ 12True先看 True &amp;&amp; False 是 False，False || True 是True。 日语篇提 QA 的时候，像客户反映问题。指定场景回答对应的日文。 问题一A 条件和 B 条件的顺序应该反过来，并不是先判断 A 再判断 B。 12答案来自 ChatGPTA 条件と B 条件の順序は逆であるべきです。A を先に判断するのではなく、B を先に判断すべきです。 问题二变量 X 只被使用过一次，应该放在方法内作为局部变量。 12答案来自 ChatGPT変数 X は一度しか使用されていないため、メソッド内のローカル変数として定義するべきです。","link":"/2024/09/02/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/2024%E5%B9%B49%E6%9C%88%E4%B8%9C%E8%BD%AF%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/"}],"tags":[{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"代码段","slug":"代码段","link":"/tags/%E4%BB%A3%E7%A0%81%E6%AE%B5/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"TortoiseGit","slug":"TortoiseGit","link":"/tags/TortoiseGit/"},{"name":"AWS","slug":"AWS","link":"/tags/AWS/"},{"name":"Web","slug":"Web","link":"/tags/Web/"},{"name":"Mac","slug":"Mac","link":"/tags/Mac/"},{"name":"Git","slug":"Git","link":"/tags/Git/"},{"name":"Switch","slug":"Switch","link":"/tags/Switch/"},{"name":"游戏","slug":"游戏","link":"/tags/%E6%B8%B8%E6%88%8F/"},{"name":"Windows","slug":"Windows","link":"/tags/Windows/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"Gosu","slug":"Gosu","link":"/tags/Gosu/"},{"name":"开发","slug":"开发","link":"/tags/%E5%BC%80%E5%8F%91/"},{"name":"iOS","slug":"iOS","link":"/tags/iOS/"},{"name":"Obsidian","slug":"Obsidian","link":"/tags/Obsidian/"},{"name":"博客园","slug":"博客园","link":"/tags/%E5%8D%9A%E5%AE%A2%E5%9B%AD/"},{"name":"知乎","slug":"知乎","link":"/tags/%E7%9F%A5%E4%B9%8E/"},{"name":"Github","slug":"Github","link":"/tags/Github/"},{"name":"Eclipse","slug":"Eclipse","link":"/tags/Eclipse/"},{"name":"软件","slug":"软件","link":"/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"MySQL","slug":"MySQL","link":"/tags/MySQL/"},{"name":"SpringBoot","slug":"SpringBoot","link":"/tags/SpringBoot/"},{"name":"IDEA","slug":"IDEA","link":"/tags/IDEA/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"PostgreSQL","slug":"PostgreSQL","link":"/tags/PostgreSQL/"}],"categories":[{"name":"开发总结","slug":"开发总结","link":"/categories/%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"},{"name":"手顺","slug":"手顺","link":"/categories/%E6%89%8B%E9%A1%BA/"},{"name":"爬坑记录","slug":"爬坑记录","link":"/categories/%E7%88%AC%E5%9D%91%E8%AE%B0%E5%BD%95/"},{"name":"编程入门","slug":"编程入门","link":"/categories/%E7%BC%96%E7%A8%8B%E5%85%A5%E9%97%A8/"},{"name":"面试记录","slug":"面试记录","link":"/categories/%E9%9D%A2%E8%AF%95%E8%AE%B0%E5%BD%95/"}],"pages":[]}